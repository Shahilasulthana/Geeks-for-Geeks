/*
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data = data;
        left=null;
        right=null;
    }
}

*/
class Solution {
    public boolean isSymmetric(Node root) {
        // Code here
        
        // We are defining an edge case that if the root is null then return nothing
        if(root == null){
            return true;
        }
        
       // Here we are creating 2 stacks one for storing the left subtree and one for storing the 
       // right subtree and pushing the left subtree in s1 and right subtree in s2
       
       // After popping them out we have to check whether they both are equal or not
        Stack<Node> s1 = new Stack<>();
        Stack<Node> s2 = new Stack<>();
        
        s1.push(root.left);
        s2.push(root.right);
        
        while(!s1.isEmpty() && !s2.isEmpty()){
        Node n1 = s1.pop();
        Node n2 = s2.pop();
        
        if(n1 == null && n2 == null){
            continue;
        }
        if(n1 == null || n2 == null || n1.data != n2.data ){
            return false;
        }
        s1.push(n1.left);
        s2.push(n2.right);
        
        s1.push(n1.right);
        s2.push(n2.left);
        }
        
        return s1.isEmpty() && s2.isEmpty();
        
        
    }
}
